syntax = "proto3";

package proto;

// --- Mixer interface

// Entrypoint of the cluster, any mixer can handle any request for the
// cluster. This is the entrypoint used by APIs to send writes, get
// timelines, find correlations or delete user data.
service MixerService {
  // For each point in the request, finds the appropriate shard and
  // writes it to the underlying databases.
  rpc PutLocation(PutLocationRequest) returns (PutLocationResponse) {}

  // Deletes a user from all shards in the cluster.
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}

  // Queries all shards and merges the timeline for a given user,
  // ordered by timestamp.
  rpc GetUserTimeline(GetUserTimelineRequest) returns (GetUserTimelineResponse) {}

  // Queries all shards to find out correlations (i.e: users that were
  // close for a given period of time).
  rpc GetUserNearbyFolks(GetUserNearbyFolksRequest) returns (GetUserNearbyFolksResponse) {};
}

// --- Interface to push location points.

service Pusher {
  rpc PutLocation(PutLocationRequest) returns (PutLocationResponse) {}
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}
}

message Location {
  uint64 timestamp = 1;
  uint32 duration = 2;
  uint64 user_id = 3;
  float gps_latitude = 4;
  float gps_longitude = 5;
  float gps_altitude = 6;
}

message PutLocationRequest {
  repeated Location locations = 1;
}

message PutLocationResponse {}

message DeleteUserRequest {
  uint64 user_id = 1;
}

message DeleteUserResponse {}

// --- Interface to lookup correlations.

service Seeker {
  rpc GetUserTimeline(GetUserTimelineRequest) returns (GetUserTimelineResponse) {}
  rpc GetUserNearbyFolks(GetUserNearbyFolksRequest) returns (GetUserNearbyFolksResponse) {};
}

message GetUserTimelineRequest {
  uint64 user_id = 1;
}

message UserTimelinePoint {
  int64 timestamp = 1;
  uint32 duration = 2;
  float gps_latitude = 3;
  float gps_longitude = 4;
  float gps_altitude = 5;
};

message GetUserTimelineResponse {
  repeated UserTimelinePoint point = 1;
}

message GetUserNearbyFolksRequest {
  uint64 user_id = 1;
}

message NearbyUserFolk {
  int64 user_id = 1;
  int64 score = 2;
}

message GetUserNearbyFolksResponse {
  repeated NearbyUserFolk folk = 1;
}

// --- Database internals.
//
// Note: it doesn't seem that the types here have an impact on the
// database size, for instance downscaling timestamp from int64 to
// int32 doesn't have a noticeable benefit. Similarly, using an int32
// instead of a float (which isn't variable in size in protobuf)
// should in theory be an improvement in size, but it doesn't. I
// suspect LZ4 compression does a very good job, which is good as it
// simplifies the implementation.
//
// Let's try to keep those as close as possible to what the
// implementation needs.

message DbKey {
  int64 timestamp = 1;
  int64 user_id = 2;
  float gps_longitude_zone = 3;
  float gps_latitude_zone = 4;
}

message DbValue {
  uint32 duration = 1;
  float gps_latitude = 2;
  float gps_longitude = 3;
  float gps_altitude = 4;
}

// This is for the reverse table, the goal is to quickly lookup the
// history of a user and build range keys to directly read the parts
// of the database we need to lookup.

message DbReverseKey {
  int64 user_id = 1;
  int64 timestamp_zone = 2;
  float gps_longitude_zone = 3;
  float gps_latitude_zone = 4;
};

message DbReverseValue {
  enum AdjacentZone {
    NO = 0;
    PREVIOUS = 1;
    NEXT = 2;
  };

  // Whether or not timestamp zone, gps longitude zone, or gps
  // latitude zone is adjacent within a close enough distance from
  // another zone.
  AdjacentZone adj_timestamp = 1;
  AdjacentZone adj_gps_longitude = 2;
  AdjacentZone adj_gps_latitude = 3;
}

// Internal service to retrieve all block entries at a given key,
// split results between the given user and other users around to
// simplify processing.  This request is per-shard and needs to be
// aggretated.
message InternalBuildBlockForUserRequest {
  DbKey timeline_key = 1;
  uint64 user_id = 2;
}

message BlockEntry {
  DbKey key = 1;
  DbValue value = 2;
}

message InternalBuildBlockForUserResponse {
  repeated BlockEntry user_entries = 1;
  repeated BlockEntry folk_entries = 2;
}
