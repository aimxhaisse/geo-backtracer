syntax = "proto3";

package proto;

// --- Interface to push location points.

service Pusher {
  rpc PutLocation(PutLocationRequest) returns (PutLocationResponse) {}
}

message Location {
  uint64 timestamp = 1;
  uint64 user_id = 2;
  float gps_latitude = 3;
  float gps_longitude = 4;
  float gps_altitude = 5;
}

message PutLocationRequest {
  repeated Location locations = 1;
}

message PutLocationResponse {}

// --- Interface to lookup correlations.

service Seeker {
  rpc GetUserTimeline(GetUserTimelineRequest) returns (GetUserTimelineResponse) {}
}

message GetUserTimelineRequest {
  uint64 user_id = 1;
}

message UserTimelinePoint {
  int64 timestamp = 1;
  float gps_latitude = 2;
  float gps_longitude = 3;
  float gps_altitude = 4;
};

message GetUserTimelineResponse {
  repeated UserTimelinePoint point = 1;
}

// --- Database internals.
//
// Note: it doesn't seem that the types here have an impact on the
// database size, for instance downscaling timestamp from int64 to
// int32 doesn't have a noticeable benefit. Similarly, using an int32
// instead of a float (which isn't variable in size in protobuf)
// should in theory be an improvement in size, but it doesn't. I
// suspect LZ4 compression does a very good job, which is good as it
// simplifies the implementation.
//
// Let's try to keep those as close as possible to what the
// implementation needs.

message DbKey {
  int64 timestamp = 1;
  int64 user_id = 2;
  float gps_longitude_zone = 3;
  float gps_latitude_zone = 4;}


message DbValue {
  float gps_latitude = 1;
  float gps_longitude = 2;
  float gps_altitude = 3;
}

// This is for the reverse table, the goal is to quickly lookup the
// history of a user and build range keys to directly read the parts
// of the database we need to lookup.

message DbReverseKey {
  int64 user_id = 1;
  int64 timestamp = 2;
}

message DbReverseValue {
  float gps_longitude_zone = 3;
  float gps_latitude_zone = 4;
};
