syntax = "proto3";

package proto;

// --- Mixer interface

// Entrypoint of the cluster, any mixer can handle any request for the
// cluster. This is the entrypoint used by APIs to send writes, get
// timelines, find correlations or delete user data.
service MixerService {
  // For each point in the request, finds the appropriate shard and
  // writes it to the underlying databases.
  rpc PutLocation(PutLocation.Request) returns (PutLocation.Response) {}

  // Deletes a user from all shards in the cluster.
  rpc DeleteUser(DeleteUser.Request) returns (DeleteUser.Response) {}

  // Queries all shards and merges the timeline for a given user,
  // ordered by timestamp.
  rpc GetUserTimeline(GetUserTimeline.Request) returns (GetUserTimeline.Response) {}

  // Queries all shards to find out correlations (i.e: users that were
  // close for a given period of time).
  rpc GetUserNearbyFolks(GetUserNearbyFolks.Request) returns (GetUserNearbyFolks.Response) {}

  // Get statistics for a mixer.
  rpc GetMixerStats(MixerStats.Request) returns (MixerStats.Response) {}
}

// --- Internal interface to push location points in a database.

service Pusher {
  rpc InternalPutLocation(PutLocation.Request) returns (PutLocation.Response) {}
  rpc InternalDeleteUser(DeleteUser.Request) returns (DeleteUser.Response) {}
}

// Location of a user for a duration at a given timestamp.
message Location {
  uint64 timestamp = 1;
  uint32 duration = 2;
  uint64 user_id = 3;
  float gps_latitude = 4;
  float gps_longitude = 5;
  float gps_altitude = 6;
}

message PutLocation {
  // Insert location points in the database.
  message Request {
    repeated Location locations = 1;
  }
  // Ack for the insert.
  message Response {}
}

message DeleteUser {
  // Delete all user data from the database.
  message Request {
    uint64 user_id = 1;
  }
  // Ack for the deletion.
  message Response {}
}

message MixerStats {
  message Request {}

  message Response {
    uint64 insert_rate_60s = 1;
    uint64 insert_rate_10m = 2;
    uint64 insert_rate_1h = 3;
  }
}

// --- Internal interface to retrieve points from the database.

service Seeker {
  rpc InternalGetUserTimeline(GetUserTimeline.Request) returns (GetUserTimeline.Response) {}
  rpc InternalGetUserNearbyFolks(GetUserNearbyFolks.Request) returns (GetUserNearbyFolks.Response) {};
  rpc InternalBuildBlockForUser(BuildBlockForUser.Request) returns (BuildBlockForUser.Response) {};
}

message GetUserTimeline {
  // Ask for the timeline of a user.
  message Request {
    uint64 user_id = 1;
  }
  // Timeline of the user, ordered by timestamp.
  message Response {
    repeated UserTimelinePoint point = 1;
  }
}

// A timeline point for a user, it may be split in N minutes blocks
// that differ from the original input (i.e: if the system got as an
// input, the user was at X for 10h, we can return 10 points at X with
// a duration of 1h).
message UserTimelinePoint {
  int64 timestamp = 1;
  uint32 duration = 2;
  float gps_latitude = 3;
  float gps_longitude = 4;
  float gps_altitude = 5;
};

message GetUserNearbyFolks {
  // Ask for correlations for a given user.
  message Request {
    uint64 user_id = 1;
  }
  // List of correlations found.
  message Response {
    repeated NearbyUserFolk folk = 1;
  }
}

// A correlation with a score denoting how close the two users were
// (takes into account distance and duration).
message NearbyUserFolk {
  int64 user_id = 1;
  int64 score = 2;
}

message BuildBlockForUser {
  // Internal service to retrieve all block entries at a given key.
  message Request {
    DbKey timeline_key = 1;
    uint64 user_id = 2;
  }
  // Here we split results between the given user and other users around
  // to simplify processing.
  message Response {
    repeated BlockEntry user_entries = 1;
    repeated BlockEntry folk_entries = 2;
  }
}

// Block entry from the database.
message BlockEntry {
  DbKey key = 1;
  DbValue value = 2;
}

// --- Database internals data structures.
//
// Note: it doesn't seem that the types here have an impact on the
// database size, for instance downscaling timestamp from int64 to
// int32 doesn't have a noticeable benefit. Similarly, using an int32
// instead of a float (which isn't variable in size in protobuf)
// should in theory be an improvement in size, but it doesn't. I
// suspect LZ4 compression does a very good job, which is good as it
// simplifies the implementation.
//
// Let's try to keep those as close as possible to what the
// implementation needs.

message DbKey {
  int64 timestamp = 1;
  int64 user_id = 2;
  float gps_longitude_zone = 3;
  float gps_latitude_zone = 4;
}

message DbValue {
  uint32 duration = 1;
  float gps_latitude = 2;
  float gps_longitude = 3;
  float gps_altitude = 4;
}

// This is for the reverse table, the goal is to quickly lookup the
// history of a user and build range keys to directly read the parts
// of the database we need to lookup.

message DbReverseKey {
  int64 user_id = 1;
  int64 timestamp_zone = 2;
  float gps_longitude_zone = 3;
  float gps_latitude_zone = 4;
};

message DbReverseValue {
  enum AdjacentZone {
    NO = 0;
    PREVIOUS = 1;
    NEXT = 2;
  };

  // Whether or not timestamp zone, gps longitude zone, or gps
  // latitude zone is adjacent within a close enough distance from
  // another zone.
  AdjacentZone adj_timestamp = 1;
  AdjacentZone adj_gps_longitude = 2;
  AdjacentZone adj_gps_latitude = 3;
}
